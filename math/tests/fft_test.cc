#include "gtest/gtest.h"

#include "math/fft.hpp"
#include "distributions.hpp"

#include "test_utils/test_utils.hpp"
#include <fstream>

namespace {
  using namespace BOOM;
  using std::endl;
  using std::cout;

  using ComplexVector = std::vector<std::complex<double>>;

  class FFTtest : public ::testing::Test {
   protected:
    FFTtest() {
      GlobalRng::rng.seed(8675309);
    }
  };

  /*
    # The following R code can be used to generate test inputs and outputs of
    # various sizes.
    test.fft <- function(size) {
      ## An R function for generating data that can be passed to CheckResults.
      x <- rnorm(size)
      z <- fft(x)

      s1 <- "Vector x = {"
      s2 <- paste(x, collapse = ", ")
      s3 <- "};"
      vx <- paste0(s1, s2, s3)

      s1 <- "Vector real_z = {"
      s2 <- paste(Re(z), collapse = ", ")
      vr <- paste0(s1, s2, s3)

      s1 <- "Vector imag_z = {"
      s2 <- paste(Im(z), collapse = ", ")
      vi <- paste0(s1, s2, s3)
      return(c(vx, vr, vi))
    }
   */
  // Check that the results of an FFT match what we get from R.
  //
  // Args:
  //   x: A sequence of real numbers.  This might be a call to rnorm(k) for some
  //     value of k.
  //   real_z:  The real component of R's fft(x).
  //   imag_z:  The imaginary component of R's fft(x).
  //
  // Effects:
  //   A BOOM::FastFourierTransform is created and used to transform x.  The
  //   test passes if the C++ real and imaginary components match the inputs
  //   from R.
  void CheckResults(const Vector &x, const Vector &real_z, const Vector &imag_z) {
    FastFourierTransform fft;
    ComplexVector z = fft.transform(x);

    EXPECT_EQ(z.size(), x.size());
    Matrix entries(x.size(), 5);
    entries.col(0) = x;
    entries.col(1) = real_z;
    entries.col(2) = imag_z;
    for (int i = 0; i < x.size(); ++i) {
      entries(i, 3) = z[i].real();
      entries(i, 4) = z[i].imag();
    }

    for (int i = 0; i < x.size(); ++i) {
      ASSERT_NEAR(real_z[i], z[i].real(), 1e-6)
          << "\n"
          << "Error occurred in position " << i << ".\n"
          << entries;
      EXPECT_NEAR(imag_z[i], z[i].imag(), 1e-6) << "\n" << entries;
    }

    Vector recover = fft.inverse_transform(z);
    // Recover is the original vector times n^2.

    recover /= recover.size();
    EXPECT_TRUE(VectorEquals(x, recover))
        << "\n"
        << "x        = " << x << "\n"
        << "recover = "  << recover << "\n";
  }

  TEST_F(FFTtest, CheckInverse) {
    int n = 10;
    ComplexVector input;
    for (int i = 0; i < n; ++i) {
      std::complex<double> z(rnorm(), rnorm());
      input.push_back(z);
    }

    FastFourierTransform fft;
    ComplexVector output = fft.complex_transform(input);
    ComplexVector input_copy = fft.inverse_complex_transform(output);

    double tiny = 1e-5;
    for (int i = 0; i < n; ++i) {
      EXPECT_NEAR(input_copy[i].real() / n, input[i].real(), tiny);
      EXPECT_NEAR(input_copy[i].imag() / n, input[i].imag(), tiny);
    }
  }

  // I generated a sequence of random numbers in R and used R's fft to take the
  // transform.
  TEST_F(FFTtest, MatchesR_10) {
    Vector x = {0.699069393237643, 0.243298407053864, 1.82365326326982,
      0.814619494870901, 0.914597639093842, -0.136970891187017,
      -0.104400202613791, 1.04582759831447, -0.869331165040763,
      -0.379856081183586};

    Vector real_z = {4.05050745581537, -0.209908712039394, -1.50693147439372,
      1.86167422306198, 0.886924001612595, 0.876670400078121, 0.886924001612595,
      1.86167422306198, -1.50693147439372, -0.209908712039394};

    Vector imag_z = {0, -3.30652133698535, -1.34232784427893,
      -0.114783855943944, 3.01374324761417, -2.22044604925031e-16,
      -3.01374324761417, 0.114783855943944, 1.34232784427893, 3.30652133698535};

    CheckResults(x, real_z, imag_z);
  }

  TEST_F(FFTtest, MatchesR_2) {
    Vector x = {-0.288372457665452, -0.249161439272905};
    Vector real_z = {-0.537533896938357, -0.0392110183925466};
    Vector imag_z = {0, 0};
    CheckResults(x, real_z, imag_z);
  }

  TEST_F(FFTtest, MatchesR_3) {
    Vector x = {-0.479975219344155, -0.260564283838167, -0.165172767583374};
    Vector real_z = {-0.905712270765697, -0.267106693633385, -0.267106693633385};
    Vector imag_z = {0, 0.0826114763821675, -0.0826114763821675};
    CheckResults(x, real_z, imag_z);
  }

  TEST_F(FFTtest, MatchesR_4) {
    Vector x = {-0.822228979064739, 2.04817818851567, 0.642871290141745, 0.966415812111228};
    Vector real_z = {2.8352363117039, -1.46510026920648, -3.19395168954989, -1.46510026920648};
    Vector imag_z = {0, -1.08176237640444, 0, 1.08176237640444};
    CheckResults(x, real_z, imag_z);
  }

  TEST_F(FFTtest, MatchesR_5) {
    Vector x = {-0.561648397765429, 1.06880239166258, -0.218342657680286, 0.85443972238985, 0.0848634738150466};
    Vector real_z = {1.22811453242177, -0.719759374924617, -1.29841888569984, -1.29841888569984, -0.719759374924617};
    Vector imag_z = {0, -0.305215857530858, -1.59862145819972, 1.59862145819972, 0.305215857530858};
    CheckResults(x, real_z, imag_z);
  }

  TEST_F(FFTtest, MatchesR_6) {
    Vector x = {-1.52121661892621, 0.558672898012533, -1.01315960277756, -2.79089580150385, -0.288372457665452, -0.249161439272905};
    Vector real_z = {-5.30413302213345, 2.07520094216896, -3.81610211957837, -0.341364336604998, -3.81610211957837, 2.07520094216896};
    Vector imag_z = {0, -0.0719209781350744, -1.32728913814204, -1.38777878078145e-17, 1.32728913814204, 0.0719209781350744};
    CheckResults(x, real_z, imag_z);
  }

  TEST_F(FFTtest, MatchesR_7) {
    Vector x = {0.721742782281823, -0.602144398993153, 0.224309920585769, 0.0949769797385891, -1.21558370999016, -0.0429372657105602, 1.79445243504823};
    Vector real_z = {0.974816742960538, 2.434407247998, -0.405668699202261, 0.00995281771037013, 0.00995281771037013, -0.405668699202261, 2.434407247998};
    Vector imag_z = {0, 1.04455714186442, 3.47710096312739, -0.0289155376661736, 0.0289155376661736, -3.47710096312739, -1.04455714186442};
    CheckResults(x, real_z, imag_z);
  }

  TEST_F(FFTtest, MatchesR_12) {
    Vector x = {-0.479975219344155, -0.260564283838167, -0.165172767583374,
      -0.822228979064739, 2.04817818851567, 0.642871290141745, 0.966415812111228,
      -0.561648397765429, 1.06880239166258, -0.218342657680286, 0.85443972238985,
      0.0848634738150466};
    Vector real_z = {3.15763857335997, -2.88275029725354, -0.423350496803669,
      0.981322593916394, -2.41001585264692, -2.43774539102901, 5.42773768214363,
      -2.43774539102901, -2.41001585264691, 0.981322593916393,
      -0.423350496803669, -2.88275029725354};
    Vector imag_z = {0, 0.209186354663792, 3.07346850064521, -1.46297825163841,
      -0.388880775873023, 0.139494357851155, 0, -0.139494357851155,
      0.388880775873023, 1.46297825163841, -3.07346850064521, -0.209186354663792};
  }

  TEST_F(FFTtest, MatchesR_83) {
    Vector x = {0.721742782281823, -0.602144398993153, 0.224309920585769, 0.0949769797385891, -1.21558370999016, -0.0429372657105602, 1.79445243504823, 0.620855766742248, -0.753523651087863, 1.48871747457509, 0.208600067107917, -0.517293533260293, 0.786546617024933, 0.266815041876984, -0.393184968240028, 0.767868424729942, 0.399632875639394, 1.06275853533737, 0.820005841771127, -0.895385285079649, 0.734867050406428, 0.742419811808478, 0.417728398406307, -1.09528257535932, -0.209243071624812, -1.80081411338231, -1.29696464971019, 0.369976888463972, -0.346527327094644, 1.32827190810645, -0.770888365423995, -0.917559475525448, -0.50719706855807, -1.28566332325237, 0.67946003335021, -0.711385647746978, 0.322035737981085, -0.311809994914194, 0.600702179954406, -0.295263182696177, 0.673346767008197, 0.384162682807514, 1.04354887292168, -0.604222607566088, 0.0838290961807156, 0.287280110156486, -0.0328300759350156, 1.97979081011752, -1.16086461799104, 1.7836475043088, -0.285952229050348, -1.27587196848694, -0.678404099654378, -0.273286587582086, -0.352239932728018, -0.116710078325653, 0.213811952578868, -0.419997784478058, 1.0856194075903, 1.04510432473663, 0.517496087812922, 0.255302435081375, 0.145274778946758, 0.535060395021097, -0.78150445758972, 0.21396457571134, -0.584411640700348, -0.364871116473665, 2.67019929486417, 0.152699386214482, -0.056954296557014, -0.420256502336498, -0.563768949503781, 1.39204300940195, 0.199358800914339, 3.72869681527618, 0.322878720419184, -1.25457359657029, -1.30933905975983, 0.661792682196012, 0.0960930550838755, -0.643185383605217, 0.314380532760721};
    Vector real_z = {9.09023027650367, 5.94606650567459, 0.345356725086146, -12.6365154237811, 1.65309754797366, -5.35041535251811, -2.9052404318398, 0.683912108833143, -1.32008815051519, 7.2619597518261, 5.29509976331271, 8.96034481746353, 10.6496289475331, -10.751644493633, -3.06368248663665, -2.82542070456681, -2.81382142501032, 1.84059632279526, 0.25115914686664, -3.20441683879729, 6.42129633493581, -0.479978012547326, 2.24728444122821, 0.302434940278588, 4.06960490039925, 0.163142801363946, -4.27039001151334, 7.64689356049883, 8.68259995786019, -0.287392594795988, -3.02856340724452, -5.62043846197603, 7.51432109619606, 0.803367024175339, 10.1657542622818, -5.42877301418829, -12.8476008852222, 8.2242132011429, -6.4139502600782, 6.33944241639484, -2.05675743792581, 5.2447231451131, 5.2447231451131, -2.05675743792581, 6.33944241639484, -6.4139502600782, 8.2242132011429, -12.8476008852222, -5.42877301418829, 10.1657542622818, 0.803367024175339, 7.51432109619606, -5.62043846197603, -3.02856340724452, -0.287392594795988, 8.68259995786019, 7.64689356049883, -4.27039001151334, 0.163142801363946, 4.06960490039925, 0.302434940278588, 2.24728444122821, -0.479978012547326, 6.42129633493581, -3.20441683879729, 0.25115914686664, 1.84059632279526, -2.81382142501032, -2.82542070456681, -3.06368248663665, -10.751644493633, 10.6496289475331, 8.96034481746353, 5.29509976331271, 7.2619597518261, -1.32008815051519, 0.683912108833143, -2.9052404318398, -5.35041535251811, 1.65309754797366, -12.6365154237811, 0.345356725086146, 5.94606650567459};
    Vector imag_z = {0, 5.01066059401303, -4.31137993152442, 0.703210436809978, 3.35640461072906, 0.290201734778405, -9.92813679949954, -0.547664854051992, 7.93154517462191, -7.87408376967077, 1.12152120995559, 7.38832781413784, 6.76958073689457, 4.23449575111403, 7.19885731342426, -4.8499754102132, -11.8473908663539, -6.6870646833508, -1.12819890530361, -3.30801565319438, -5.15274328846542, -4.67303673956899, 1.10972459304142, 10.9898181888808, 10.4214436403976, 10.7506226647694, 6.43119353167168, 0.97968471168568, 5.1439673996065, -8.31951028725733, -1.46898070256857, -0.507011808488527, -7.42866791133035, 8.94030846373944, 5.62867886518081, 5.66459636701904, -1.51981425137014, 1.94124576557808, -9.07586182658517, -4.34374172090875, -3.42192569131813, 0.0653921538867559, -0.0653921538867559, 3.42192569131813, 4.34374172090875, 9.07586182658517, -1.94124576557808, 1.51981425137014, -5.66459636701904, -5.62867886518081, -8.94030846373944, 7.42866791133035, 0.507011808488527, 1.46898070256857, 8.31951028725733, -5.1439673996065, -0.97968471168568, -6.43119353167168, -10.7506226647694, -10.4214436403976, -10.9898181888808, -1.10972459304142, 4.67303673956899, 5.15274328846542, 3.30801565319438, 1.12819890530361, 6.6870646833508, 11.8473908663539, 4.8499754102132, -7.19885731342426, -4.23449575111403, -6.76958073689457, -7.38832781413784, -1.12152120995559, 7.87408376967077, -7.93154517462191, 0.547664854051992, 9.92813679949954, -0.290201734778405, -3.35640461072906, -0.703210436809978, 4.31137993152442, -5.01066059401303};
    CheckResults(x, real_z, imag_z);
  }

}  // namespace
